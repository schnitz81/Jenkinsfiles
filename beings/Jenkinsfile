pipeline {
    agent any

    stages {
    	stage('Clean workspace') {
	    deleteDir();
	}
	stage('Checking dependencies') {
	    echo 'Checking gcc.'
	    if (fileExists('/usr/bin/gcc')) {
	        echo 'gcc installed'
	    } else {
	        echo 'Error: Can't find gcc.'
		Environment.Exit(1)
	    }

	    echo 'Checking curses.'
	    if (fileExists('/usr/include/curses.h')) {
	        echo 'curses-dev installed'
	    } else {
	        echo 'Error: Can't find curses.'
		Environment.Exit(1)
	    }
	    
	}
        stage('Checkout repo') {
            steps {
	        echo 'Cloning beings repo'
                git url: 'https://github.com/schnitz81/beings.git'
            }
        }
        stage('Compile') {
            steps {
                echo 'Compiling...'
                sh 'gcc -v -Wall -c ai.c'
		sh 'gcc -v -Wall -c event.c'
		sh 'gcc -v -Wall -c being.c'
		sh 'gcc -v -Wall -c main.c'
		sh 'gcc -v -Wall -c world.c'
		sh 'gcc -v -o beings main.o ai.o event.o being.o world.o -lcurses'
            }
        }
        stage('Test of binary existance') {
            steps {
                echo 'Testing...'
                echo '******'
                echo 'Checking if file exists'
                fileExists('beings')
            }
        }
        stage('Test-binary-runnable') {
            steps {
                echo 'Testing binary returning OK exit code...'
                echo ''
                echo 'Test run...'
                sh './cproj'  // Binary must retun zero or will be interpreted as error. 
            }
        }
    }
}
