pipeline {
	agent any 
	
	environment {
		// Choose destination folder to place built appImage in:
		ARTIFACT_FOLDER = '/tmp'
	}

	stages {
		stage('Clean workspace') {
			steps {
    	        deleteDir();
			}
		}
		stage('Checking gcc availability') {
			steps {
				script {
					if(fileExists('/usr/bin/gcc')) {
						echo 'gcc found'
					} else {
						echo 'Error: Cant find gcc.'
						Environment.Exit(1)
					}
				}
			}
		}
		stage('Checking curses availability') {
				steps {
				script {
					if(fileExists('/usr/include/curses.h')) {
						echo 'curses found.'
					} else {
						echo 'Error: Cant find curses.'
						Environment.Exit(1)
					}
				}
			}
		}
		stage('Checkout repo') {
			steps {
				echo 'Cloning beings repo'
				git url: 'https://github.com/schnitz81/beings.git'
			}
		}
        stage('Compile') {
			steps {
				echo 'Compiling...'
				sh 'gcc -v -Wall -c ai.c'
				sh 'gcc -v -Wall -c being.c'
				sh 'gcc -v -Wall -c event.c'
				sh 'gcc -v -Wall -c main.c'
				sh 'gcc -v -Wall -c world.c'
				sh 'gcc -v -o beings.x64 main.o ai.o event.o being.o world.o -lcurses'
			}
		}
		stage('Stash executable') {
			steps {
				echo 'Checking if file exists.'
				fileExists('beings')
				echo 'Stashing executable.'
				stash includes: 'beings.x64', name: 'executable'
			}
		}
		stage('Clean workspace before appImage deps preparation') {
			steps {
    	        deleteDir();
			}
		}
		stage('Checkout of appImage deps') {
			steps {
				echo 'Cloning Jenkins repo'
				git url: 'https://github.com/schnitz81/Jenkinsfiles.git'
			}
		}
		stage('Create appImage fs') {
			steps {
				echo "Creating fs for appImage"
				sh 'mkdir -pv beings-appfs/usr/lib'
				sh 'mkdir -pv beings-appfs/usr/bin'
			}
		}
		stage('Put appimage files in appfs') {
			steps {
				echo "Putting necessary appimage files in appfs..."
				sh 'mv -v beings/AppRun beings-appfs/'
				sh 'mv -v beings/beings.desktop beings-appfs/'
				sh 'mv -v beings/icon.png beings-appfs/'
			}
		}
		
		stage('Unstash executable') {
			steps {
				dir('beings-appfs/usr/bin') {
					echo 'Unstashing and naming executable'
					unstash 'executable'
				}
			}
		}
		stage('Solve and copy lib dependencies') {
			steps {
				dir('beings-appfs/usr/bin') {
					echo "Copying libs..." 
					sh script: """
					   noOfLibs=`ldd beings.x64 | grep -ce '\\/lib\\(.*\\)\\ '`
					   echo \$noOfLibs libs to be copied.
					   for i in `seq 1 \$noOfLibs`; do cp -v `ldd beings.x64 | grep -oe '\\/lib\\(.*\\)\\ ' | head -n \$i | tail -n 1` ../lib/ ; done \
					""", returnStdout: true
				}
			}
		}
		stage('Download appimagetool') {
			steps {
				sh 'wget https://github.com/probonopd/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage'
				sh 'chmod -v +x appimagetool-x86_64.AppImage'
			}
		}
		stage('Build appimage') {
			steps {
				sh 'ARCH=x86_64 ./appimagetool-x86_64.AppImage -v ./beings-appfs beings-x86_64.AppImage'
			}
		}
		stage('Distribute appimage') {
			steps {
				sh 'mv -v beings*.AppImage ${ARTIFACT_FOLDER}/'
			}
		}
    }
}
